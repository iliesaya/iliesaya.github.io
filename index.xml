<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ayachips</title>
    <link>http://iliesaya.github.io/</link>
    <description>Recent content on Ayachips</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Sep 2019 11:24:18 +0300</lastBuildDate>
    
	<atom:link href="http://iliesaya.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>weekly predicting solar power at neom</title>
      <link>http://iliesaya.github.io/blog/weekly-predicting-solar-power-at-neom/</link>
      <pubDate>Sun, 15 Sep 2019 11:24:18 +0300</pubDate>
      
      <guid>http://iliesaya.github.io/blog/weekly-predicting-solar-power-at-neom/</guid>
      <description>This is the jupyter notebook from our JunctionX kaust hackaton (weekly firecast), source is here  import matplotlib.pyplot as plt import numpy as np import pandas as pd from sklearn import linear_model, ensemble, metrics, model_selection, preprocessing import joblib  %matplotlib inline  Predicting Solar Power Output at NEOM neom_data = (pd.read_csv(&amp;quot;../data/raw/neom-data.csv&amp;quot;, parse_dates=[0]) .rename(columns={&amp;quot;Unnamed: 0&amp;quot;: &amp;quot;Timestamp&amp;quot;}) .set_index(&amp;quot;Timestamp&amp;quot;, drop=True, inplace=False))  neom_data.info()  &amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt; DatetimeIndex: 96432 entries, 2008-01-01 00:00:00 to 2018-12-31 23:00:00 Data columns (total 12 columns): mslp(hPa) 96432 non-null float64 t2(C) 96432 non-null float64 td2(C) 96432 non-null float64 wind_speed(m/s) 96432 non-null float64 wind_dir(Deg) 96432 non-null float64 rh(%) 96432 non-null float64 GHI(W/m2) 96432 non-null float64 SWDIR(W/m2) 96432 non-null float64 SWDNI(W/m2) 96432 non-null float64 SWDIF(W/m2) 96432 non-null float64 rain(mm) 96432 non-null float64 AOD 96432 non-null float64 dtypes: float64(12) memory usage: 9.</description>
    </item>
    
    <item>
      <title>predicting solar power at neom</title>
      <link>http://iliesaya.github.io/blog/predicting-solar-power-at-neom/</link>
      <pubDate>Sun, 15 Sep 2019 11:21:18 +0300</pubDate>
      
      <guid>http://iliesaya.github.io/blog/predicting-solar-power-at-neom/</guid>
      <description>This is the jupyter notebook from our JunctionX kaust hackaton (24h forecast), source is here  import matplotlib.pyplot as plt import numpy as np import pandas as pd from sklearn import linear_model, ensemble, metrics, model_selection, preprocessing import joblib  %matplotlib inline  Predicting Solar Power Output at NEOM neom_data = (pd.read_csv(&amp;quot;../data/raw/neom-data.csv&amp;quot;, parse_dates=[0]) .rename(columns={&amp;quot;Unnamed: 0&amp;quot;: &amp;quot;Timestamp&amp;quot;}) .set_index(&amp;quot;Timestamp&amp;quot;, drop=True, inplace=False))  neom_data.info()  &amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt; DatetimeIndex: 96432 entries, 2008-01-01 00:00:00 to 2018-12-31 23:00:00 Data columns (total 12 columns): mslp(hPa) 96432 non-null float64 t2(C) 96432 non-null float64 td2(C) 96432 non-null float64 wind_speed(m/s) 96432 non-null float64 wind_dir(Deg) 96432 non-null float64 rh(%) 96432 non-null float64 GHI(W/m2) 96432 non-null float64 SWDIR(W/m2) 96432 non-null float64 SWDNI(W/m2) 96432 non-null float64 SWDIF(W/m2) 96432 non-null float64 rain(mm) 96432 non-null float64 AOD 96432 non-null float64 dtypes: float64(12) memory usage: 9.</description>
    </item>
    
    <item>
      <title>Full backup Nvidia Jetson Xavier</title>
      <link>http://iliesaya.github.io/blog/backup_jetson/</link>
      <pubDate>Sun, 15 Sep 2019 09:40:18 +0300</pubDate>
      
      <guid>http://iliesaya.github.io/blog/backup_jetson/</guid>
      <description>Command to do a full backup of the NVIDIA jetson xavier source is from here
Creating the backup image file You will need a PC running ubuntu with Nvidia sdk JetPack 4.2 and 64go of free space. From this PC, ssh to your jetson (jetson is running normaly, not on restore mode).
ssh jetsonUser@JetsonIP  On the Jetson, through this ssh, stop the filesystem and force it to read only access:</description>
    </item>
    
    <item>
      <title>JunctionX KAUST 2019 : Predicting the Future of Solar Power Generation at NEOM</title>
      <link>http://iliesaya.github.io/blog/junctionxkaust/</link>
      <pubDate>Sun, 15 Sep 2019 09:23:18 +0300</pubDate>
      
      <guid>http://iliesaya.github.io/blog/junctionxkaust/</guid>
      <description>Solar power generation forecasts will be a critical need if SOs are to balance NEOM&amp;rsquo;s grid. We built an ML model to forecast solar power generation that takes into account NEOM&amp;rsquo;s weather patterns. Devpost link
Inspiration Solar power generation forecasts will be a critical need if SOs are to balance NEOM&amp;rsquo;s smart electricity grid with nearly 100% renewables. Even though NEOM is blessed with plenty of solar radiation, NEOM also experiences substantial fluctuations in temperature, wind, and dust and these factors can all have a substantial impact on solar power generation.</description>
    </item>
    
    <item>
      <title>Tensorflow not initializing during riaps deployment</title>
      <link>http://iliesaya.github.io/blog/tensorflow_riaps_jetson/</link>
      <pubDate>Sun, 08 Sep 2019 17:23:18 +0300</pubDate>
      
      <guid>http://iliesaya.github.io/blog/tensorflow_riaps_jetson/</guid>
      <description>Strange error cannot allocate memory in static TLS block under riaps plateform I am deploying on an nvidia Jetson Xavier a Tensorflow / Keras application (tensorflow-gpu==1.13.1+nv19.5).
If I launch my python code outside riaps, it&amp;rsquo;s working , no error. But when I deploy it with riaps_ctrl and launch it, here is the result :
 &amp;lt;class &#39;ImportError&#39;&amp;gt;: Traceback (most recent call last): File &amp;quot;/usr/local/lib/python3.6/dist-packages/tensorflow/python/pywrap_tensorflow.py&amp;quot;, line 58, in &amp;lt;module&amp;gt; from tensorflow.</description>
    </item>
    
  </channel>
</rss>